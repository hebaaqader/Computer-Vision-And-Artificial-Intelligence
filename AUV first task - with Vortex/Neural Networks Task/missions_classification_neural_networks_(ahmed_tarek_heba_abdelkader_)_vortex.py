# -*- coding: utf-8 -*-
"""Missions classification - Neural Networks (Ahmed Tarek - Heba Abdelkader ) - vortex.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hc4vVEG0z00GXoOWlraAQsxF6TDNvoE0
"""

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image
from tensorflow.keras.optimizers import RMSprop
import matplotlib.pyplot as plt
import tensorflow as tf
import numpy as np
import cv2
import os

#img=image.load_img("/content/drive/My Drive/MyDataset/training/bat/bat-201.jpg")#test image path from training
#plt.imshow(img)

#cv2.imread("/content/drive/My Drive/MyDataset/training/bat/bat-201.jpg").shape#test image path from training

train = ImageDataGenerator(rescale= 1/255)
validation = ImageDataGenerator(rescale=1/255)

train_dataset = train.flow_from_directory("/content/drive/My Drive/MyDataset/training", #training folder end with /
                                          target_size= (500,600))
validation_dataset = train.flow_from_directory("/content/drive/My Drive/MyDataset/validation",#validation folder end with /
                                          target_size= (500,600))

model = tf.keras.Sequential([tf.keras.layers.Conv2D(8,(3,3),activation="relu",input_shape=(500,600,3)),
                             tf.keras.layers.MaxPool2D(2,2),
                             #
                             tf.keras.layers.Conv2D(16,(3,3),activation="relu"),
                             tf.keras.layers.MaxPool2D(2,2),
                             #
                             tf.keras.layers.Conv2D(32,(3,3),activation="relu"),
                             tf.keras.layers.MaxPool2D(2,2),
                             ##
                        
                             tf.keras.layers.Conv2D(64,(3,3),activation="relu"),
                             tf.keras.layers.MaxPool2D(2,2),
                             tf.keras.layers.Conv2D(128,(3,3),activation="relu"),
                             tf.keras.layers.MaxPool2D(2,2),
        
                             tf.keras.layers.Conv2D(256,(3,3),activation="relu"),
                             tf.keras.layers.MaxPool2D(2,2),
                            
                             ##
                            
                             tf.keras.layers.Flatten(),
                             ##
                             tf.keras.layers.Dense(256,activation="relu"),
                             ##
                             tf.keras.layers.Dense(8,activation="softmax")
                             ])

model.compile(loss='categorical_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])

model_fit = model.fit(train_dataset,
                      steps_per_epoch=100,
                      epochs=8 ,
                      validation_data=validation_dataset)

train_dataset.classes

validation_dataset.class_indices

dir_path = "/content/drive/My Drive/MyDataset/testing" #test path end with /
for i in os.listdir(dir_path):
  img = image.load_img(dir_path+"/"+ i,target_size=(500,600))
  plt.imshow(img)
  plt.show()
  
  X=image.img_to_array(img)
  X=np.expand_dims(X,axis=0)
  images=np.vstack([X])
  val = model.predict_classes(images)
  print(val)
  if val == 0: #conditions
    print("This is a bat") 
  elif val == 1:
    print("This is a draugar")
  elif val == 2:
    print("This is a garlic")
  elif val == 3:
    print("This is a gate")
  elif val == 4:
    print("This is a sunlight")
  elif val == 5:
    print("This is a vampire")
  elif val == 6:
    print("This is a vetalas")
  elif val == 7 :
    print("This is a wolf")